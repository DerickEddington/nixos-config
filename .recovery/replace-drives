#!/usr/bin/env bash
set -o errexit -o nounset

# Replace failed/missing drives of degraded ZFS mirror pools, for a host that
# was installed with the ../.new-installs/prepare-installation script.
#
# This is intended to be run from either: the host with degraded pools (if it
# will still boot-up), or from a boot-up of a live-rescue-ISO-image where the
# target pools can be imported (with `zpool import -R`).
#
# This is intended to be used with new replacement drives that are at least the
# same size as and have the same sector size as the good drives that remain,
# because the partition table of the first good drive is replicated to the new
# drives.


# Initialization

SELF="$0"

## Assert that all needed utilities are available, before doing anything.
which partx sgdisk partprobe zpool zfs mkfs.vfat > /dev/null

## Get command-line arguments

function show-usage
{
    local PROG="$(basename "$SELF")"

    echo "Error: Incorrect command-line arguments."
    echo
    echo "Usage: $PROG \\"
    echo "         --pools suffix-ID   \\  # E.g.: \"7km9ta\""
    echo "         --good drive ...    \\  # /dev/disk/by-id/\$D"
    echo "         --bad-boot part ... \\  # vdev GUID or /dev/disk/by-id/\$D-part\$N"
    echo "         --bad-main part ... \\  # vdev GUID or /dev/disk/by-id/\$D-part\$N"
    echo "         --new drive ...        # /dev/disk/by-id/\$D"
    echo
    echo "If the environment variable REPLACE_DRIVES_MOUNT_PREFIX is set, its value is"
    echo "joined to the front of the path-names of the mount-points of the file-systems"
    echo "involved in the replacing.  This enables, e.g., this script to be used from a"
    echo "boot-up of a live-rescue-ISO-image where the target pools have been imported"
    echo "with \`zpool import -R /mnt\` and when \`export REPLACE_DRIVES_MOUNT_PREFIX=/mnt\`."
    echo

    case ${ARGS_ERR[0]:-} in
        (suffix-id)
            echo "Pool-name suffix ID must be of (without name prefix):"
            echo
            zpool list -H -o name
            ;;
        (drives)
            local GOOD_OR_NEW=${ARGS_ERR[1]}
            echo "$GOOD_OR_NEW drives must be of (without partition):"
            echo
            ls -A -l /dev/disk/by-id/*
            ;;
        (bad-partitions)
            local POOL_PREFIX=${ARGS_ERR[1]}
            echo "Bad $POOL_PREFIX partitions must be of (vdev GUID or partition-device name):"
            echo
            zpool status -v -P $POOL_PREFIX-$SUFFIX_ID
            ;;
        (bad-new-amounts)
            local BAD_AMNT=${ARGS_ERR[1]} NEW_AMNT=${ARGS_ERR[2]}
            echo "Amount of bad ($BAD_AMNT) and new ($NEW_AMNT) must be the same."
            ;;
        (invalid-option)
            local INVALID_OPT="${ARGS_ERR[1]}"
            echo "Invalid option: \`$INVALID_OPT\`."
            ;;
    esac
} 1>&2

function get-args
{
    GOOD_DRIVES=() BAD_BOOT_PARTITIONS=() BAD_MAIN_PARTITIONS=() NEW_DRIVES=()
    MNT="${REPLACE_DRIVES_MOUNT_PREFIX:-}"

    while [ $# -ge 1 ]; do
        case "$1" in
            (--pools)
                SUFFIX_ID="$2"
                POOLS=({boot,main}-"$SUFFIX_ID")
                shift 2
                ;;
            (--good | --bad-boot | --bad-main | --new)
                case "$1" in
                    (--good)     local -n ARRAY=GOOD_DRIVES ;;
                    (--bad-boot) local -n ARRAY=BAD_BOOT_PARTITIONS;;
                    (--bad-main) local -n ARRAY=BAD_MAIN_PARTITIONS;;
                    (--new)      local -n ARRAY=NEW_DRIVES ;;
                esac
                while shift && [ $# -ge 1 ]; do
                    if [[ "$1" =~ ^-- ]]; then
                        break
                    else
                        ARRAY+=("$1")
                    fi
                done
                ;;
            (*) ARGS_ERR=(invalid-option "$1"); return 1 ;;
        esac
    done

    [ "${SUFFIX_ID:-}" ]
    [ ${#GOOD_DRIVES[@]} -ge 1 ]
    [ ${#BAD_BOOT_PARTITIONS[@]} -ge 1 ]
    [ ${#BAD_MAIN_PARTITIONS[@]} -ge 1 ]
    [ ${#NEW_DRIVES[@]} -ge 1 ]

    ARGS_ERR=(suffix-id)
    [[ "$SUFFIX_ID" =~ ^[[:alnum:]]{6}$ ]]

    function check-drives {
        local A
        for A in "$@"; do
            [[ "$A" =~ ^/dev/disk/by-id/([^[:space:][:cntrl:]]+)$ ]]
            ! [[ "${BASH_REMATCH[1]}" =~ -part ]]
        done
    }
    ARGS_ERR=(drives Good)
    check-drives "${GOOD_DRIVES[@]}"
    ARGS_ERR=(drives New)
    check-drives "${NEW_DRIVES[@]}"

    function check-bad-partitions {
        local A
        for A in "$@"; do
            [[ "$A" =~ ^/dev/disk/by-id/[^[:space:][:cntrl:]]+-part[[:digit:]]+$
            || "$A" =~ ^[[:digit:]]+$ ]]  # vdev GUID
        done
    }
    ARGS_ERR=(bad-partitions boot)
    check-bad-partitions "${BAD_BOOT_PARTITIONS[@]}"
    ARGS_ERR=(bad-partitions main)
    check-bad-partitions "${BAD_MAIN_PARTITIONS[@]}"

    ARGS_ERR=(bad-new-amounts
              "${#BAD_BOOT_PARTITIONS[@]},${#BAD_MAIN_PARTITIONS[@]}"
              "${#NEW_DRIVES[@]}")
    [ ${#NEW_DRIVES[@]} -eq ${#BAD_BOOT_PARTITIONS[@]} ]
    [ ${#NEW_DRIVES[@]} -eq ${#BAD_MAIN_PARTITIONS[@]} ]

    unset ARGS_ERR  # Above checks all true - did not errexit.
}

trap show-usage ERR EXIT
get-args "$@"
trap - ERR EXIT

set -o xtrace

## Discover and map partition names to partition numbers

function get-partitions-info
{
    declare -g -A PARTITION_NUMBER
    local LINES=() L NR NAME

    # Lines of the form: `NR="$PART_NUM" NAME="$PART_NAME"`
    readarray LINES < <(partx --pairs --output NR,NAME ${GOOD_DRIVES[0]})

    for L in "${LINES[@]}"; do
        eval "$L"  # Sets NR and NAME
        PARTITION_NUMBER["$NAME"]="$NR"
    done

    # Assert that the needed partitions were discovered
    for NAME in EFI boot main; do
        [[ "${PARTITION_NUMBER[$NAME]}" =~ ^[[:digit:]]+$ ]]
    done
}

get-partitions-info


# Helpers

function upcase
{
    tr [:lower:] [:upper:] <<< "$1"
}

function elem-of
{
    local FIND="$1" LIST=("${@:2}")

    for X in "${LIST[@]}"; do
        if [ "$FIND" = "$X" ]; then
            return 0
        fi
    done

    return 1
}

# Primary Functions

function snapshot
{
    local NAME=$1 POOL

    for POOL in ${POOLS[@]}; do
        zfs snapshot -r $POOL@$NAME
    done
}

function replicate-partitions
{
    local I

    for I in ${!NEW_DRIVES[@]}; do
        sgdisk --replicate=${NEW_DRIVES[I]} ${GOOD_DRIVES[0]}
        sgdisk --randomize-guids ${NEW_DRIVES[I]}  # Other drives must not have same GUIDs.
    done

    sleep 1
    partprobe ${NEW_DRIVES[@]}
    sleep 2
}

function setup-zpool-partition
{
    local POOL="$1-$SUFFIX_ID" PART=${PARTITION_NUMBER["$1"]} OPTS=("${@:2}") I
    local -n BAD_PARTITIONS=BAD_"$(upcase "$1")"_PARTITIONS

    for I in ${!NEW_DRIVES[@]}; do
        BAD=${BAD_PARTITIONS[I]}
        NEW=${NEW_DRIVES[I]}-part$PART
        zpool replace -f ${OPTS[@]} $POOL $BAD $NEW
    done
}

function setup-efi-partition
{
    local PART=${PARTITION_NUMBER[EFI]} D DEV DIR

    for D in ${NEW_DRIVES[@]}; do
        DEV=$D-part$PART
        DIR="$MNT"/boot/efis/${D##*/}-part$PART
        mkfs.vfat -F 32 -n EFI $DEV
        mkdir -p $DIR
        mount -t vfat $DEV $DIR
    done

    # Remove EFI-system-partition mount-points of the bad drives

    local KEEP_DRIVES=( ${GOOD_DRIVES[@]##*/} ${NEW_DRIVES[@]##*/} )

    for DIR in "$MNT"/boot/efis/*
    do
        if [[ "$DIR" =~ ^"$MNT"/boot/efis/(.+)-part[[:digit:]]+$ ]]
        then
            D="${BASH_REMATCH[1]}"
            if ! elem-of "$D" ${KEEP_DRIVES[@]}; then
                rm -v -r -f "$DIR" || echo "Proceeding without removing $DIR"
            fi
        fi
    done
}

function setup-partitions
{
    replicate-partitions
    setup-zpool-partition main -s  # Start replace of this pool ASAP, before next.
    setup-zpool-partition boot     # -s not supported (no feature@device_rebuild).
    setup-efi-partition
}

function describe-required-next-steps
{
    cat <<EOF
Now you must edit my.zfs.mirrorDrives, in
$MNT/etc/nixos/per-host/\$YOUR_HOST/default.nix, to
remove the old replaced drives and add the new replacement drives.  I.e.:

  my.zfs = {
    mirrorDrives = [
$(for D in "${GOOD_DRIVES[@]}" "${NEW_DRIVES[@]}"; do
    echo "      \"$(basename "$D")\""
  done)
    ];
    # ... (The other options should not need changing.)
  };

Then you must run \`nixos-rebuild boot --install-bootloader\` from \$YOUR_HOST
(not some other live rescuer), to regenerate the new system configuration so
that it uses the new drives and not the old.

Now booting into \$YOUR_HOST should work normally again, and now you may reboot
into it.
EOF
}


# Operations

snapshot pre-replace_$(date +%Y-%m-%d_%H:%M:%S)_LT
setup-partitions
describe-required-next-steps
