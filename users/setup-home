#!/usr/bin/env bash
set -o errexit -o nounset -o xtrace

# This script sets-up the home directory of a newly-created user.  It is
# intended to be run, by the new user, only once when the new home directory is
# empty.  Normally, it is run with the current working directory being the new
# $HOME, but it could be run in any directory.
#
# E.g., after a new user has been added in /etc/nixos/configuration.nix, root
# should do:
#   # passwd $NEW_USER
#   # su -l $NEW_USER
#   $ /etc/nixos/users/setup-home
#   $ logout

function fail {
    echo "Error:" "$@"
    exit 1
} 1>&2

function assert-nonexistent {
    local F="$DIR/$1"
    [ ! -e "$F" ] || fail "$F already exists!"
}

function assert-all-nonexistent {
    local F
    while F="${1:-}"; shift; do
        assert-nonexistent "$F"
    done
}

function git-clone-into-nonempty {
    local ARGS=("$@")
    local REPO="${ARGS[-2]}"
    local DEST="${ARGS[-1]}"
    local OPTS=("${ARGS[@]:0:$#-2}")

    mkdir cloned-"$DEST"  # Empty
    git clone "${OPTS[@]}" --no-checkout "$REPO" cloned-"$DEST"
    mv cloned-"$DEST"/.git "$DEST"/
    rmdir cloned-"$DEST"
    (cd "$DEST"
     git checkout)
}


DIR="${1:-.}"
DOTFILES_ORIGIN="${2:-/etc/nixos/users/dotfiles}"

cd "$DIR"

shopt -s nullglob dotglob
EXISTING_FILES=(*)
shopt -u nullglob dotglob

# Basic sanity check.  Non-exhaustive since the checkout of the DOTFILES_ORIGIN
# will try to create other files that also should not exist yet.
assert-all-nonexistent .dotfiles .git .git-hidden .config/home-manager/home.nix

chmod -v og-rwx .

# Populate the user's home-directory with the system-wide dot-files "skeleton"
# by cloning the repository.  Arrange for the Git directory to be .dotfiles
# instead of .git, to avoid seeing $DIR (e.g. $HOME) by default as a repository.
{
    if [ ${#EXISTING_FILES[@]} -eq 0 ]; then
        CLONE_COMMAND="git clone"
    else
        CLONE_COMMAND=git-clone-into-nonempty
    fi

    $CLONE_COMMAND --separate-git-dir=.dotfiles "$DOTFILES_ORIGIN" .
    git checkout -b user/"$USER" --no-track

    # Ensure that the local user name is always used for commits to a user's
    # ~/.dotfiles repository:
    git config user.name "$USER"
    git config user.email "$USER@$HOSTNAME"

    mv -v .git .git-hidden
}

# The .dotfiles repository provides .config/user-dirs.dirs but the directories
# which that declares do not exist yet, and the presence of that file would
# cause the xdg-user-dirs-update invocations at session logins to change the
# file to not declare non-existent directories, which is not what we want.  To
# avoid that, invoke xdg-user-dirs-update once with the files being absent so it
# will create the default directories along with recreating the files, which is
# what we want and which matches the tracked content of those files.
{
    rm -f .config/user-dirs.*
    xdg-user-dirs-update
}

# Install home-manager per user and activate.  The dot-files installed above
# provide a premade .config/home-manager/home.nix file.
{
    [[ "$(nixos-version)" =~ ^([[:digit:]]+\.[[:digit:]]+) ]]  # errexit on fail
    NIXOS_RELEASE="${BASH_REMATCH[1]}"
    HOMEMANAGER_URL="https://github.com/nix-community/home-manager/archive/release-$NIXOS_RELEASE.tar.gz"

    nix-channel --add "$HOMEMANAGER_URL" home-manager
    nix-channel --update

    export NIX_PATH="$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH"

    nix-shell '<home-manager>' -A install

    # # Dump its news now so it will be quiet about this after.
    # home-manager news > /dev/null
}
